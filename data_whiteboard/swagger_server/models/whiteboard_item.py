# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WhiteboardItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, guid: str=None, name: str=None, data_type: str=None, source: str=None, user: str=None, fresh_date: datetime=None, payload: object=None):  # noqa: E501
        """WhiteboardItem - a model defined in Swagger

        :param guid: The guid of this WhiteboardItem.  # noqa: E501
        :type guid: str
        :param name: The name of this WhiteboardItem.  # noqa: E501
        :type name: str
        :param data_type: The data_type of this WhiteboardItem.  # noqa: E501
        :type data_type: str
        :param source: The source of this WhiteboardItem.  # noqa: E501
        :type source: str
        :param user: The user of this WhiteboardItem.  # noqa: E501
        :type user: str
        :param fresh_date: The fresh_date of this WhiteboardItem.  # noqa: E501
        :type fresh_date: datetime
        :param payload: The payload of this WhiteboardItem.  # noqa: E501
        :type payload: object
        """
        self.swagger_types = {
            'guid': str,
            'name': str,
            'data_type': str,
            'source': str,
            'user': str,
            'fresh_date': datetime,
            'payload': object
        }

        self.attribute_map = {
            'guid': 'guid',
            'name': 'name',
            'data_type': 'data_type',
            'source': 'source',
            'user': 'user',
            'fresh_date': 'freshDate',
            'payload': 'payload'
        }
        self._guid = guid
        self._name = name
        self._data_type = data_type
        self._source = source
        self._user = user
        self._fresh_date = fresh_date
        self._payload = payload

    @classmethod
    def from_dict(cls, dikt) -> 'WhiteboardItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WhiteboardItem of this WhiteboardItem.  # noqa: E501
        :rtype: WhiteboardItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def guid(self) -> str:
        """Gets the guid of this WhiteboardItem.


        :return: The guid of this WhiteboardItem.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid: str):
        """Sets the guid of this WhiteboardItem.


        :param guid: The guid of this WhiteboardItem.
        :type guid: str
        """
        if guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")  # noqa: E501

        self._guid = guid

    @property
    def name(self) -> str:
        """Gets the name of this WhiteboardItem.


        :return: The name of this WhiteboardItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this WhiteboardItem.


        :param name: The name of this WhiteboardItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def data_type(self) -> str:
        """Gets the data_type of this WhiteboardItem.


        :return: The data_type of this WhiteboardItem.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type: str):
        """Sets the data_type of this WhiteboardItem.


        :param data_type: The data_type of this WhiteboardItem.
        :type data_type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501

        self._data_type = data_type

    @property
    def source(self) -> str:
        """Gets the source of this WhiteboardItem.


        :return: The source of this WhiteboardItem.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this WhiteboardItem.


        :param source: The source of this WhiteboardItem.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def user(self) -> str:
        """Gets the user of this WhiteboardItem.


        :return: The user of this WhiteboardItem.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this WhiteboardItem.


        :param user: The user of this WhiteboardItem.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def fresh_date(self) -> datetime:
        """Gets the fresh_date of this WhiteboardItem.


        :return: The fresh_date of this WhiteboardItem.
        :rtype: datetime
        """
        return self._fresh_date

    @fresh_date.setter
    def fresh_date(self, fresh_date: datetime):
        """Sets the fresh_date of this WhiteboardItem.


        :param fresh_date: The fresh_date of this WhiteboardItem.
        :type fresh_date: datetime
        """
        if fresh_date is None:
            raise ValueError("Invalid value for `fresh_date`, must not be `None`")  # noqa: E501

        self._fresh_date = fresh_date

    @property
    def payload(self) -> object:
        """Gets the payload of this WhiteboardItem.


        :return: The payload of this WhiteboardItem.
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload: object):
        """Sets the payload of this WhiteboardItem.


        :param payload: The payload of this WhiteboardItem.
        :type payload: object
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")  # noqa: E501

        self._payload = payload
